'''
위상정렬
위상정렬은 정렬 알고리즘의 일종이며 순서가 정해져있는 일련의 작업을 차례대로 수행해야할 때 사용할 수 있는 알고리즘

" 방향그래프의 모든 노드를 '방향성에 거스르지 않도록 순서대로 나열하는것' "

현실에서의 위상정렬은 선수과목을 고려한 학습순서 설정을 들 수 있음
예를 들어 컴공 커리큘럼에서 '자료구조' 과목을 수강한 뒤에 '알고리즘'강의를 수강하는 것을 권장한다.
이때 '자료구조' 및 '알고리즘'을 각각의 노드로 표현하고, '자료구조'에서 '알고리즘으로 이어질 수 있도록
방향성을 갖는 간선을 그릴 수 있다. 다시말해 그래프상 선후관계가 있다면,
위상정렬을 수행하여 모든 선후 관계를 지키는 전체 순서를 계산할 수 있다.

위상정렬 알고리즘을 공부하기 전 진입차수를 알아야한다.
진입차수란 특정한 노드로 '들어오는' 간선의 갯수를 의미한다.
위상정렬 알고리즘은 다음과 같다.

    1. 진입차수가 0인 노드를 큐에 넣는다.
    2. 큐가 빌 때까지 다음의 과정을 반복한다.
        i. 큐에서 원소를 꺼내 해당 노드에서 출발하는 간선을 그래프에서 제거한다.
        ii. 새롭게 진입차수가 0이 된 노드를 큐에 넣는다.

알고리즘에서 큐가 빌 때까지 큐에서 원소를 계속 꺼내서 처리하는 과정이 있다.
이때 모든 원소를 방문하기 전에 큐가 빈다면 사이클이 존재한다고 판단할 수 있다.
사이클이 존재하는 경우 사이클에 포함되어 있는 원소 중에서 어떠한 원소도 큐에 들어가지 못하기 때문이다.
'''

# 위상정렬 소스코드

from collections import deque

# 노드의 갯수와 간선의 갯수 입력받기
v, e = map(int,input().split())
# 모든 노드에 대하여 진입차수는 0으로 초기화
indegree = [0] * (v + 1)
# 각 노드에 연결된 간선 정보를 담기 위한 연결 리스트(그래프) 초기화
graph = [[] for i in range(v+1)]

# 방향 그래프의 모든 간선 정보를 입력받기
for _ in range(e):
    a, b = map(int, input().split())
    graph[a].append(b) # 정점 A에서 B로 이동가능
    indegree[b] += 1 # 진입차수 1 증가

# 위상 정렬 함수
def topology_sort():
    result = [] # 결과를 담을 리스트
    q = deque() # 큐 기능을 위한 deque 사용

    # 처음 시작할 때는 진입차수가 0인 노드를 큐에 삽입
    for i in range(1, v+1):
        if indegree[i] == 0:
            q.append(i)
    
    # 큐가 빌 때까지 반복
    while q: 
        # 큐에서 원소꺼내기
        now = q.popleft()
        result.append(now)
        # 해당 원소와 연결된 노드들의 진입차수에서 1빼기
        for i in graph[now]:
            indegree[i] -= 1
            # 새롭게 진입차수가 0이 되는 노드를 큐에 삽입
            if indegree[i] == 0:
                q.append(i)
    
    # 위상 정렬을 수행한 결과 출력
    for i in result:
        print(i,end=' ')

topology_sort()

'''
입력 예시
7 8
1 2
1 5
2 3
2 6
3 4
4 7
5 6
6 4 
출력 예시
1 2 5 3 6 4 7 
'''
'''
시간 복잡도
O(V+E)
'''

