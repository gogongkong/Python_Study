'''
다익스트라 최단경로 알고리즘

여러개의 노드가 있을 때, 특정한 노드에서 출발하여 다른 노드로 가는 각각의 최단 경로를 구해주는 알고리즘
다익스트라 최단 경로 알고리즘은 '음의 간선'이 없을 때 정상적으로 동작한다.
음의 간선이란 0보다 작은 값을 가지는 간선을 의미하며 실제로 음의 간선은 표현되지 않음.

기본 개념
    1. 출발노드 설정
    2. 최단 거리 테이블 초기화
    3. 방문하지 않은 노드 중에서 최단거리가 가장 짧은 노드를 선택 
    4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신
    5. 위 과정에서 3과 4번을 반복

다익스트라 알고리즘은 최단 경로를 구하는 과정에서 '각 노드에 대한 현재까지의 최단 거리' 정보를 항상 1차원 리스트에 저장하며
리스트를 계속 갱신한다는 특징이 있다.
매번 현재 처리하고 있는 노드를 기준으로 주변 간선을 확인한다.
나중에 현재 처리하고 있는 노드와 인접한 노드로 도달하는 더 짧은 경로를 찾으면 ' 더 짧은 경로도 있네? ' 하고 갱신.
따라서 방문하지 않은 노드 중에서 현재 최단 거리가 가장 짧은 노드를 확인해 그 노드에 대해 4번의 과정을 수행한다는 점에서
그리디 알고리즘으로도 볼 수 있다.

'''
'''
다익스트라 알고리즘은 힙 자료구조를 이용한다.
힙(heap) = 우선순위 큐
    - 우선순위가 가장 높은 데이터를 가장 먼저 삭제하는 특징을 가지고 있음
사용할 때는 일반적으로 정수형 자료형이 사용되며 첫번째 원소를 기준으로 우선순위를 정한다.
예를 들어 (가치, 물건)으로 구성된다면 '가치' 값이 우선순위의 값이 되는것.
최대 힙과 최소 힙이 있는데 
    - 최소 힙은 값이 낮은 데이터가 먼저 삭제
    - 최대 힙은 값이 높은 데이터가 먼저 삭제
기본적으로 최소 힙 구조를 이용하고 최소힙을 최대 힙처럼 사용하려면 우선순위 값에 음수(-)를 넣어서 넣었다가
다시 음수 부호를 붙여서 빼내면 최대 힙으로 사용 가능

'''

# 다익스트라 알고리즘 소스코드 예시
import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

# 노드의 갯수, 간선의 갯수를 입력받기
n, m = map(int, input().split())
# 시작 노드 번호를 입력받기
start = int(input())
# 각 노드에 연결 되어 있는 노드에 대한 정보를 담는 리스트를 만들기
graph = [[] for i in range(n+1)]
# 최단 거리 테이블을 모두 무한으로 초기화
distance = [INF] * (n+1)

# 모든 간선의 정보 입력받기
for _ in range(m):
    a, b, c = map(int, input().split())
    # a 노드에서 b노드로 가는 비용이 c
    graph[a].append((b,c))

def dijicstra(start):
    q = []
    # 시작 노드로 가기 위한 최단 경로는 0으로 설정하여, 큐에 삽입
    heapq.heappush(q, (0,start))
    distance[start] = 0
    while q:
        # 가장 최단 거리가 짧은 노드에 대한 정보 꺼내기
        dist, now = heapq.heappop(q)
        # 현재 노드가 이미 처리된 적이 있는 노드라면 무시
        if distance[now] < dist:
            continue
        # 현재 노드와 연결된 다른 인접한 노드들을 확인
        for i in graph[now]:
            cost = dist + i[1]
            # 현재 노드를 거쳐서, 다른 노드로 이동하는 경우가 더 짧은 경우
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q,(cost, i[0]))

dijicstra(start)

for i in range(1, n+1):
    if distance[i] == INF:
        print("INF")
    else:
        print(distance[i])

'''
입력 예시
6 11
1
1 2 2
1 3 5
1 4 1
2 3 3 
2 4 2
3 2 3
3 6 5
4 3 3
4 5 1
5 3 1
5 6 2
출력 예시
0
2
3
1
2
4
'''
