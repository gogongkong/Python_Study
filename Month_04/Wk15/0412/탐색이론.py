'''
탐색
"많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 의미한다.
대표적인 탐색 알고리즘으로 DFS, BFS가 있음

오버플로우
    - 자료구조가 수용할 수 있는 데이터의 크기가 가득 찬 상태에서 삽입 연산을 수행할 때 발생
언더 플로우
    - 데이터가 전혀 들어 있지 않은 상태에서 삭제 연산을 수행할 때 발생

스택
    - 선입 후출(First In Last Out)
큐
    - 선입 선출(First In First Out)


재귀함수
DFS와 BFS를 구현하려면 재귀함수를 이해하고 있어야 한다.
재귀함수란 "자기 자신을 다시 호출하는 함수"를 의미한다.
'''

# 재귀함수 예제
# def recursive_function():
#     print('재귀함수를 호출합니다.')
#     recursive_function()

# recursive_function()

'''
위 코드를 실행하면 '재귀함수를 호출합니다.'라는 문자열을 무한히 출력한다.
정의한 recursive_function()이 자기 자신을 계속해서 추가로 불러오기 때문이다.
물론 어느정도 출력하다가 재귀의 최대 깊이를 초과하여 에러를 발생시키고 멈춘다.
'''

'''
재귀함수의 종료 조건
재귀함수를 문제풀이에서 사용할 대는 재귀함수가 언제 끝날지, 종료 조건을 꼭 명시해야 한다.
종료시간을 명시하지 않으면 무한 호출될 수 있다.
다음 코드는 재귀함수를 100번 호출하도록 작성한 코드이다.
'''
def recursive_function(i):
    # 100번째 출력했을 때 종료되도록 종료 조건 명시
    if i == 100:
        return
    print(i,'번째 재귀함수에서', i+1,'번째 재귀함수를 호출 합니다.')
    recursive_function(i+1)
    print(i,'번째 재귀함수를 종료합니다.')

recursive_function(1)

'''
컴퓨터 내부에서 재귀함수의 수행은 스택 자료구조를 이용한다.
함수를 계속 호출했을 대 가장 마지막에 호출한 함수가 먼저 수행을 끝내야 그 앞의 함수 호출이 종료되기 때문이다.
컴퓨터 구조 측면에서 보자면 연속해서 호출되는 함수는 메인 메모리의 스택공간에 적재되므로
재귀함수는 스택 자료구조와 같다는 말은 틀린 말이 아니다.
따라서 스택 자료구조를 활용해야 하는 상당수 알고리즘은 재귀 함수를 이용하여 간편하게 구현될 수 있다.
DFS가 대표적인 예이다.
재귀함수를 이용하는 대표적 예제로는 팩토리얼(!) 문제가 있다.
수학적으로 0!과 1!은 1로 같다는 성질을 이용하여 팩토리얼함수는 n이 1이하가 되었을 때 함수를 종료하는 
재귀함수 형태로 구현할 수 있다.
'''

# 2가지 방식으로 구현한 팩토리얼 예제
# 반복적으로 구현한 N!
def factorial_iteractive(n):
    result = 1
    # 1부터 n까지의 수를 차례대로 곱하기
    for i in range(1, n+1):
        result *= i
    return result

# 재귀적으로 구현한 N!
def factorial_recursive(n):
    if n <= 1: # n이 1이하인경우 1을 반환
        return 1
    #n! = n * (n-1)!을 그대로 코드로 작성하기.
    return n * factorial_recursive(n-1)

# 각각의 방식으로 구현한 n! 출력(n=5)
print('반복적으로 구현 : ',factorial_recursive(5))
print('재귀적으로 구현 : ', factorial_iteractive(5))

'''
실행 결과는 동일하다. 그렇다면 반복문 대신에 재귀함수를 사용했을 때 얻을 수 있는 장점은 무엇인가?
코드를 비교했을 때 재귀함수의 코드가 더 간결하다.
간결해진 이유는 재귀함수가 수학의 점화식을 그대로 소스코드로 옮겼기 때문이다.
수학에서 정화식은 특정한 함수를 자신보다 더 작은 변수에 대한 함수와의 관계로 표현한 것을 의미한다.
이 개념은 이후에 배울 8장의 다이나믹 프로그래밍으로 이어지기 때문에 중요하다.
팩토리얼을 수학적 점화식으로 표현해보면 다음과 같다.
    1. n이 0 혹은 1일때 : factorial(n) = 1
    2. n이 1보다 클 때 : factorial(n) = n * factorial(n-1)
일반적으로 우리는 점화식에서 종료 조건을 찾을 수 있는데, 앞 예시에서 종료 조건은 'n이 0혹은 1일 때'이다.
팩토리얼은 n이 양의 정수일 때에만 유효하기 때문에 n이 1이하인 경우 1을 반환할 수 있도록 재귀함수를 작성해야한다.
n이 1 이하인 경우를 고려하지 않으면 재귀함수가 무한히 반복되어 결과를 출력하지 못할 것이다.
또한 n의 값으로 음수가 들어왔을 때는 입력 범위 오류로, 오류메세지를 듸우도록 코드를 작성할 수 도 있다.
따라서 재귀 함수 내에서 특정 조건일 때 더 이상 재귀적으로 함수를 호출하지 않고 종료하도록
if문을 이용하여 꼭 종료 조거을 구현해 주어야 한다.
'''