'''
DFS
"깊이 우선 탐색이라고도 부르며, 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다."

그래프는 노드(정점)와 간선으로 표현된다
그래프 탐색이란 하나의 노드를 시작으로 다수의 노드를 방문하는 것을 말한다.
또한 두 노드가 간선으로 연결되어 있다면 "두 노드는 인접하다" 라고 표현한다.

그래프는 2가지 방식으로 표현할 수 있다.
    - 인접 행렬 : 2차원 배열로 그래프의 연결관계를 표현하는 방식
    - 인접 리스트 : 리스트로 그래프의 연결 관계를 표현하는 방식

먼저 인접 행렬 방식은 2차원 배열에 각 노드가 연결된 형태를 기록하는 방식이다.
연결되지 않은 노드끼리는 무한의 비용이라고 작성한다.
실제 코드에서는 논리적으로 정답이 될 수 없는 큰 값 중에서 9999999999.987654321 등의 값으로 초기화 하는 경우가 많다.
이렇게 그래프를 인접 행렬 방식으로 처리할 때는 다음과 같이 데이터를 초기화 한다.
'''
# 인접 행렬 방식 예제
INF = 999999999 # 무한의 비용 선언

# 2차원 리스트를 이용해 인접 행렬 표현
graph = [
    [0, 7, 5],
    [7, 0, INF],
    [5, INF, 0]
]
print(graph)

'''
인접 리스트 방식은 모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장한다.
인접 리스트 "연결 리스트"라는 자료구조를 이용해 구현하는데, C++이나 자바는 별도로 연결리스트 기능을 위한
표준 라이브러리를 제공한다.
반면 파이썬은 기본 자료형이 append()와 메소드를 제공하므로, 전통적인 프로그래밍 언어에서의 배열과
연결 리스트의 기능을 모두 기본으로 제공한다.
파이썬으로 인접 리스트를 이용해 그래프를 표현하고자 할 때에도 단순히 2차원 리스트를 이용하면 된다는 점만 기억하자
다음은 예제 그래프를 인접 리스트 방식으로 처리할 때 데이터를 초기화 한 코드이다.
'''

# 행(Row)이 3개인 2차원 리스트로 인접 리스트 표현
arr = [[] for _ in range(3)]

# 노드 0에 연결된 노드 정보 저장(노드, 거리)
arr[0].append((1,7))
arr[0].append((2,5))

#노드 1에 연결된 노드 정보 저장 (노드, 거리)
arr[1].append((0,7))

# 노드 2 ~
arr[2].append((0,5))

print(arr)

'''
두 방식은 어떤 차이가 있을까?
메모리와 속도 측면에서 보자면 

인접 행렬 
    - 모든 관계를 저장하므로 노드 갯수가 많을수록불필요한 메모리가 생긴다.

인접 리스트
    - 연결된 정보만을 저장하기 때문에 메모리를 효율적으로 사용한다.
    - 인접 행렬에 비해 특정한 두 노드가 연결되어 있는지 정보를 얻는 속도가 느리다.(하나씩 확인해야 하기 때문)

그러므로 특정한 노드와 연결된 모든 인접 노드를 순회해야 하는 경우
인접 리스트 방식이 인접 행렬 방식에 비해 메모리 공간의 낭비가 적다.

DFS는 깊이 우선 탐색 알고리즘이다.
이 알고리즘은 특정한 경로로 탐색하다가 특정한 상황에서 최대한 깊숙히 들어가서 노드를 방문한 후
다시 돌아가 다른 경로로 탐색하는 알고리즘이다.
DFS는 스택 자료구조를 이용하며 구체적인 동작과정은 다음과 같다.
    1. 탐색 시작 노드를 스택에 삽입하고 방문처리를 한다.
    2. 스택의 최상단 노드에 방문하지 않은 인접 노드가 있다면 그 인접 노드를 스택에 넣고 방문 처리를 한다.
      방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼낸다.
    3. 2번의 과정을 더 이상 수행할 수 없을때 까지 반복한다.

[TIP]
"방문 처리"는 스택에 한 번 삽입되어 처리된 노드가 다시 삽입되지 않게 체크하는 것을 의미한다.
방문 처리를 함으로써 각 노드를 한 번씩만 처리할 수 있다.
'''