'''
정렬

기준에 따라 데이터를 정렬

정렬이란 " 데이터를 특정한 기준에 따라서 순서대로 나열 " 하는것을 말한다.
정렬 알고리즘으로 데이터를 정렬하면 " 이진탐색 " 이 가능해진다.
정렬 알고리즘의 종류는
선택 정렬, 삽입 정렬, 퀵정렬, 계수 정렬 등등이 있다.

선택 정렬
데이터가 무작위로 여러 개 있을 때, " 이 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸고,
그 다음 작은 데이터를 선택해 앞에서 두 번째 데이터와 바꾸는 과정을 반복하면 어떨까?"
해당 방법은 가장 원시적인 방법으로 매번 가장 작은 것을 "선택" 한다는 의미에서 선택 정렬이라고 한다.

"가장 작은것을 선택해서 앞으로 보내는 과정을 반복해서 수행하다 보면, 전체 데이터의 정렬이 이루어진다."

'''

# 선택 정렬 소스코드
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array)):
    min_index = i # 가장 작은 원소의 인덱스
    for j in range(i+1, len(array)):
        if array[min_index] > array[j]:
            min_index = j
    array[i], array[min_index] = array[min_index], array[i] # 스와프
print(array)

'''
선택 정렬의 시간 복잡도

선택 정렬은 N-1번 만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 한다.
또한 매번 가장 작은 수를 찾기 위해서 비교연산이 필요하다.
빅 오 표기법으로 O(N^2)
데이터가 10000개면 15초이상이 걸림 = 너무 비효율적
"그러나 특정한 리스트에서 가장 작은 데이터를 찾는일이 잦아 선택정렬에 익숙해질 필요가 있음"
'''

'''
삽입 정렬

선택 정렬은 알고리즘 문제 풀이에 사용하기에는 느린 편이다. 그렇다면 다른 접근 방법에 대해서 생각해보자

" 데이터를 하나씩 확인하며, 각 데이터를 적절한 위치에 삽입하면 어떨까? "

삽입 정렬은 선택 정렬처럼 동작 원리를 직관적으로 이해하기 쉬운 알고리즘이다.
물론 삽입 정렬은 선택 정렬에 비해 구현 난이도가 높은 편이지만 선택 정렬에 비해 실행 시간 측면에서 더 효율적인
알고리즘으로 잘 알려져 있다.
특히 삽입 정렬은 필요할 때만 위치를 바꾸므로 
" 데이터가 거의 정렬 되어 있을 때" 훨씬 효율적이다.
선택 정렬은 현재 데이터의 상태와 상관없이 무조건 모든 원소를 비교하고 위치를 바꾸는 반면 삽입정렬은 그렇지 않다.
'''

# 삽입 정렬 소스코드
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]
for i in range(1, len(array)):
    for j in range(i, 0, -1): # 인덱스 i부터 1까지 감소하며 반복하는 문법
        if array[j] < array[j-1]: # 
            array[j], array[j-1] = array[j-1], array[j] # 한 칸씩 왼쪽으로 이동
        else: # 자기보다 작은 데이터를 만나면 그 자리에서 멈춤
            break
print(array)

'''
삽입 정렬의 시간 복잡도
삽입 정렬의 시간 복잡도는 O(N^2)인데, 선택 정렬고 마찬가지로 반복문이 2번 중첩되어 사용되었다.
선택 정렬과 흡사한 시간이 소요되지만 리스트의 데이터가 거의 정렬되어 있는 상태라면 매우 빠르게 동작한다.
보통은 삽입 정렬이 비효율적이나 정렬이 거의 되어 있는 상황에서는 퀵 정렬보다 더 강력하다.
'''

'''
퀵 정렬
가장 많이 사용되는 정렬 알고리즘

" 기준 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸면 어떨까? "

퀵 정렬은 기준을 설정한 다음 큰 수와 작은 수를 교환한 후 리스트를 반으로 나누는 방식으로 동작한다.
퀵 정렬에는 피벗이 사용된다
큰 숫자와 작은 숫자를 교환할 때, 교환하기 위한 기준을 바로 피벗이라고 표현한다.
퀵 정렬을 수행하기 전에는 피벗을 어떻게 설정할 것인지 미리 명시해야 한다.
피벗을 설정하고 리스트를 분할하는 방법에 따라서 여러 가지 방식으로 퀵 정렬을 구분하는데,
여기서는 가장 대표적인 분할 방식인 호어 분할 방식을 기준으로 퀵 정렬을 설명한다.
호어 분할 방식에서는 다음과 같은 규칙에 따라 피벗을 설정한다.
    - 리스트에서 첫 번째 데이터를 피벗으로 정한다.
이와 같이 피벗을 설정한 뒤에는 왼쪽에서부터 피벗보다 큰 데이터를 찾고, 오른쪽에서부터
피벗보다 작은 데이터를 찾는다. 그 다음 큰 데이터와 작은 데이터를 서로 교환해준다.
이러한 과정을 반복하면 피벗에 대하여 정렬이 수행된다.

'''

# 퀵 정렬 소스코드
array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort(array, start, end):
    if start >= end: # 원소가 1개인 경우 종료
        return
    pivot = start # 피벗은 첫 번째 원소
    left = start + 1
    right = end
    while left <= right:
        # 피벗보다 큰 데이터를 찾을 때까지 반복
        while left <= end and array[left] <= array[pivot]:
            left += 1
        # 피벗보다 작은 데이터를 찾을 때 까지 반복
        while right > start and array[right] >= array[pivot]:
            right -= 1
        if left > right: # 엇갈렸다면 작은 데이터와 피벗을 교체
            array[right], array[pivot] = array[pivot], array[right]
        else: # 엇갈리지 않았다면 작은 데이터와 큰 데이터를 교체
            array[left], array[right] = array[right], array[left]
    
    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬 수행
    quick_sort(array, start, right -1)
    quick_sort(array, right+1, end)

quick_sort(array, 0, len(array)-1)
print(array)

# 파이썬의 장점을 살린 퀵 정렬 소스코드
# 전통의 퀵 정렬의 분할 방식과는 조금 다르고 비교 연산횟수가 증가하여 조금 비효율적이지만 직관적이고 기억하기 쉽다.
array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]

def quick_sort_py(array):
    # 리스트가 하나 이하의 원소만을 담고있다면 종료
    if len(array) <= 1:
        return array
    
    pivot = array[0] # 피벗은 첫 번째 원소
    tail = array[1:] # 피벗을 제외한 리스트

    left_side = [x for x in tail if x <= pivot] # 분할된 왼쪽 부분
    right_side = [x for x in tail if x > pivot] # 분할된 오른쪽 부분

    # 분할 이후 왼쪽 부분과 오른쪽 부분에서 각각 정렬을 수행하고, 전체 리스트를 반환
    return quick_sort_py(left_side) + [pivot] + quick_sort_py(right_side)

print(quick_sort_py(array))
