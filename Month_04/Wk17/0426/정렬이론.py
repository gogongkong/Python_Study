'''
정렬

기준에 따라 데이터를 정렬

정렬이란 " 데이터를 특정한 기준에 따라서 순서대로 나열 " 하는것을 말한다.
정렬 알고리즘으로 데이터를 정렬하면 " 이진탐색 " 이 가능해진다.
정렬 알고리즘의 종류는
선택 정렬, 삽입 정렬, 퀵정렬, 계수 정렬 등등이 있다.

선택 정렬
데이터가 무작위로 여러 개 있을 때, " 이 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸고,
그 다음 작은 데이터를 선택해 앞에서 두 번째 데이터와 바꾸는 과정을 반복하면 어떨까?"
해당 방법은 가장 원시적인 방법으로 매번 가장 작은 것을 "선택" 한다는 의미에서 선택 정렬이라고 한다.

"가장 작은것을 선택해서 앞으로 보내는 과정을 반복해서 수행하다 보면, 전체 데이터의 정렬이 이루어진다."

'''

# 선택 정렬 소스코드
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(len(array)):
    min_index = i # 가장 작은 원소의 인덱스
    for j in range(i+1, len(array)):
        if array[min_index] > array[j]:
            min_index = j
    array[i], array[min_index] = array[min_index], array[i] # 스와프
print(array)

'''
선택 정렬의 시간 복잡도

선택 정렬은 N-1번 만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 한다.
또한 매번 가장 작은 수를 찾기 위해서 비교연산이 필요하다.
빅 오 표기법으로 O(N^2)
데이터가 10000개면 15초이상이 걸림 = 너무 비효율적
"그러나 특정한 리스트에서 가장 작은 데이터를 찾는일이 잦아 선택정렬에 익숙해질 필요가 있음"
'''

'''
삽입 정렬

선택 정렬은 알고리즘 문제 풀이에 사용하기에는 느린 편이다. 그렇다면 다른 접근 방법에 대해서 생각해보자

" 데이터를 하나씩 확인하며, 각 데이터를 적절한 위치에 삽입하면 어떨까? "

삽입 정렬은 선택 정렬처럼 동작 원리를 직관적으로 이해하기 쉬운 알고리즘이다.
물론 삽입 정렬은 선택 정렬에 비해 구현 난이도가 높은 편이지만 선택 정렬에 비해 실행 시간 측면에서 더 효율적인
알고리즘으로 잘 알려져 있다.
특히 삽입 정렬은 필요할 때만 위치를 바꾸므로 
" 데이터가 거의 정렬 되어 있을 때" 훨씬 효율적이다.
선택 정렬은 현재 데이터의 상태와 상관없이 무조건 모든 원소를 비교하고 위치를 바꾸는 반면 삽입정렬은 그렇지 않다.
삽입 정렬은 특정한 데이터를 적절한 위치에 "삽입"한다는 의미에서 삽입 정렬이라고 부른다.
더불어 삽입 정렬은 특정한 데이터가 적정한 위치에 들어가기 이전에, 그 앞까지의 데이터는 이미 정렬되어 있다고 가정한다.
정렬 되어 있는 데이터 리스트에서 적절한 위치를 찾은 뒤에, 그 위치에 삽입된다는 점이 특징이다.
또하나의 특징은 삽입정렬은 두 번째 데이터부터 시작한다. 왜냐하면
" 첫 번째 데이터는 그 자체로 정렬되어 있다고 판단하기 때문이다."

삽입정렬의 특징중 하나는 정렬이 이루어진 원소는 항상 오름차순을 유지하고 있다는 점이다.
'''