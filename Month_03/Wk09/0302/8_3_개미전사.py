'''
문제
개미전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량창고를 몰래 공격하려고 한다. 
메뚜기 마을에는 여러 개의 식량창고가 있는데 식량창고는 일직선으로 이어져 있다. 
각 식량창고에는 정해진 수의 식량을 저장하고 있으며 개미 전사는 식량창고를 선택적으로 약탈하여 식량을 빼앗을 예정이다. 
이때 메뚜기 정찰병들은 일직선상에 존재하는 식량창고 중에서 서로 인접한 식량창고가 공격받으면 바로 알아챌 수 있다. 
따라서 개미 전사가 정찰병에게 들키지 않고 식량창고를 약탈하기 위해서는 최소한 한 칸 이상 떨어진 식량창고를 약탈해야 한다. 
예를 들어 식량창고 4개가 다음과 같이 존재한다고 가정하자.

{1, 3, 1, 5}
이때 개미 전사는 두 번째 식량창고와 네 번째 식량창고를 선택했을 때 최댓값인 총 8개의 식량을 빼앗을 수 있다. 
개미 전사는 식량창고가 이렇게 일직선상일 때 최대한 많은 식량을 얻기를 원한다.

개미 전사를 위해 식량창고 N개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 식량창고의 개수 N이 주어진다. (3<=N<=100)
둘째 줄에 공백으로 구분되어 각 식량창고에 저장된 식량의 개수 K가 주어진다. (0<=K<=1,000)
출력
첫째 줄에 개미 전사가 얻을 수 있는 식량의 최댓값을 출력하시오.

[입력 예시]
4
1 3 1 5

[출력 예시]
8
'''

n = int(input())

k = list(map(int,input().split()))


d = [0] * 10000

d[0] = k[0]
d[1] = max(k[0], k[1])
for i in range(2, n):
    d[i] = max(d[i-1], d[i-2] +k[i])

print(d[n-1])



''' 
내 해석
예를 들어 d[i]일때는 d[i]에만 갔다고 가정하고 d[i-1], d[i-2]의 값은 확인하지만 
d[i+1]이상의 창고는 생각하지않음
d[i]까지만 방문한것의 최댓값을 저장하는것
그러면 d[i+1]을 계산할 때 이전에 d[i]를 계산했을때 저장한 값을 불러오면서 d[i]에 저장된 d[i]까지의 최댓값
그리고 d[i+1]을 계산해 나온 값을 비교해 더 큰 최댓값을 저장하며 갱신해 나가는것
그렇기 때문에 print(d[n-1])로 최댓값이 출력됨
'''

# 해석을 토대로 다시 한번 집중해서 풀어보기

n = int(input()) # 식량 창고의 갯수 N 입력받기

k = list(map(int, input().split())) # 식량 창고에 저장된 식량의 갯수를 입력 - 공백으로 구분

d = [0] * 1000 # DP값 초기화(0으로 끝까지 초기화하는것)

d[0] = k[0] # 0번째 즉 처음 값은 최댓값이 d[0] 하나뿐이 없으므로 미리 기입
d[1] = max(k[0], k[1]) # k[0] , k[1] 둘밖에 없기에 이미 둘중에 최댓값을 기입

for i in range(2, n): # d[0], d[1]은 반복문 이전 이미 수행하였기 때문에 d[2]부터 시작
    d[i] = max(d[i-1], d[i-2] + k[i]) # 이전값의 최댓값 vs 두칸 전의식량(d[i-2]) + 현재 위치의 식량갯수(k[i])

print(d[n-1])



