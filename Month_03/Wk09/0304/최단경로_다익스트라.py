'''
최단경로 알고리즘
말 그대로 가장 짧은 경로를 찾는 알고리즘이다. - 길찾기 문제라고도 불림
다양한 종류가 있는데 상황에 맞는 효율적인 알고리즘이 이미 정립되어 있음
예를들어
1. 한 지점에서 다른 특정지점까지의 최단 경로를 구해야 하는 경우
2. 모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구해야 하는 경우
등 사례에 맞는 알고리즘을 알고 있다면 문제를 좀 더 쉽게 풀 수 있다.

최단경로 문제는 보통 그래프를 이용하며 각 지점은 그래프에서 노드로 표현되고
노드간 연결된 도로는 간선이라고 표현됨
최단 경로를 모두 출력하기 보단 단순히 최단 경로를 출력하도록 요구하는 문제가 많이 출제됨

최단거리 알고리즘은
1. 다익스트라
2. 플로이드 워셜
3. 벨만 포드
3가지인데 다익스트라 / 플로이드 워셜이 가장 많이 등장함.




다익스트라 최단 경로 알고리즘

여러개의 노드가 있을 때, 특정한 노드에서 출발하여 다른 노드로 가는 최단경로를 구해줌
    조건 = 음의 간선이 없을 경우    
기본적으로 그리디 알고리즘으로 분류되며 매번 비용이 가장 적은 노드를 선택해 임의의 과정을 반복
기본 원리
    1. 출발노드를 설정
    2. 최단 거리 테이블을 초기화
    3. 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택한다.
    4. 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단거리 테이블을 갱신한다.
    5. 위 과정에서 3, 4번을 반복한다.
각 노드에 대한 현재까지의 최단거리 정보를 항상 1차원 리스트에 저장하며 계속 갱신하는 특징이있음
매번 현재 처리하고 있는 노드를 기준으로 주변 간선을 확인한다.
나중에 현재 처리중인 노드와 인접한 노드로 가는 더 짧은 경로를 찾으면 해당 경로로 갱신
따라서 방문하지 않은 노드중에서 현재 최단 거리가 가장 짧은 노드를 환인해 해당 노드에 대해
4번 과정을 수행한다는 점에서 그리디 알고리즘으로 볼 수 있다.

다익스트라는 한 단계당 하나의 노드에 대한 최단 거리를 확실히 찾는것으로 이해 할 수 있다.
'''
'''
간단한 다익스트라 알고리즘
간단한 알고리즘은 O(V^2)의 시간복잡도를 가지며 V는 노드의 갯수를 의미
처음에 각 노드에 대한 최단거리를 담는 1차원 리스트를 선언.
이후에 단계만다 방문하지 않은 노드중 최단거리가 가장 짧은 노드를 선택하기위해 단계마다
1차원 리스트의 모든 원소를 확인(순차 탐색) 한다.

데이터 수가 많다는 가정하에 input()을 더 빠르게 동작하는 sys.std.readline()으로 치환해서 사용
모든 리스트는(노드의 갯수 +1)의 크기로 할당해서 노드 번호를 인덱스 번호와 동일히 하여 
바로 접근할 수 있게 한다.
'''


# 간단한 다익스트라 알고리즘 소스코드
'''
[입력 예시]
6 11
1
1 2 2
1 3 5
1 4 1
2 3 3
2 4 2
3 2 3
3 6 5
4 3 3
4 5 1
5 3 1
5 6 2

[출력예시]
0
2
3
1
2
4
'''

import sys
input = sys.stdin.readline
INF = int(1e9) # 무한을 의미하는 10억을 설정

# 노드의 갯수, 간선의 갯수를 입력받기
n, m = map(int, input().split())
# 시작 노드 번호를 입력받기
start = int(input())
# 각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트를 만들기
graph = [[] for i in range(n+1)]
# 방문한 적이 있는지 체크하는 목적의 리스트를 만들기
visited = [False] * (n+1)
# 최단 거리 테이블을 모두 무한으로 초기화
distance = [INF] * (n+1)

# 모든 간선 정보를 입력받기
for _ in range(m):
    a, b, c = map(int, input().split())
    # a번 노드에서 b번 노드로 가는 비용이 c라는 의미
    graph[a].append((b,c))

# 방문하지 않은 노드 중에서, 가장 최단 거리가 짧은 노드의 번호를 반환
def get_smallest_node():
    min_value = INF
    index = 0 # 가장 최단 거리가 짧은 노드(인덱스)
    for i in range(1, n+1):
        if distance[i] < min_value and not visited[i]:
            min_value = distance[i]
            index = i
    return index

def dijkstra(start):
    # 시작 노드에 대해서 초기화
    distance[start] = 0
    visited[start] = True
    for j in graph[start]:
        distance[j[0]] = j[1]
    # 시작 노드를 제외한 전체 n-1개의 노드에 대해 반복
    for i in range(n-1):
        # 현재 최단 거리가 가장 짧은 노드를 꺼내서, 방문 처리
        now = get_smallest_node()
        visited[now] = True
        # 현재 노드와 연결된 다른 노드를 확인
        for j in graph[now]:
            cost = distance[now] + j[1]\
            # 현재 노드를 거쳐서 다른 노드로 이동하는 거리가 더 짧은 경우
            if cost < distance[j[0]]:
                distance[j[0]] = cost

# 다익스트라 알고리즘 수행
dijkstra(start)

# 모든 노드로 가기 위한 최단 거리를 출력
for i in range(1, n+1):
    # 도달할 수 없는 경우, 무한(INFINITY)이라고 출력
    if distance[i] == INF:
        print("INFINITY")
    # 도달할 수 있는 경우 거리를 출력
    else:
        print(distance[i])


