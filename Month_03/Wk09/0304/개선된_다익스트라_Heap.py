# 개선된 다익스트라 알고리즘
'''
개선된 방식은 시간복잡도 O(E log V)를 보장해줌(V = 노드의 갯수, E = 간선의 갯수)
간단한 방식은 시간복잡도 O(V^2)

개선된 다익스트라 알고리즘은 힙(Heap) 자료구조를 사용한다.
힙 자료구조를 이용하게 되면 특정 노드까지의 최단 거리에 대한 정보를 힙에 담아서 처리하므로
출발 노드로부터 가장 거리가 짧은 노드를 더욱 빠르게 찾을 수 있다.
속도가 획기적으로 빨라짐
'''

# 힙(Heap)
'''
힙 자료구조는 우선순위 큐(Priority Queue)를 구현하기 위해 사용하는 자료구조 중 하나이다.
스택, 큐, 우선순위 큐의 비교는 아래와 같다.
스택 : 후입선출
큐 : 선입선출
우선순위 큐 : 우선순위가 가장 높은 데이터를 가장 먼저 삭제

우선순위 큐는 데이터를 우선순위에 따라 처리하고 싶을 때 사용한다.
예시 : 물건 데이터를 자료구조에 넣었다가 가치가 높은 물건 데이터부터 꺼내 확인해야 하는경우

파이썬에서는 PriorityQueue 혹은 heapq를 사용할 수 있는데, 두 가지 모두 우선순위 큐를 지원함
하지만 heapq가 일반적으로 더 빠르게 동작을 함.

우선순위 값을 표현할 때는 정수형 자료형 변수가 사용된다.
예를들어 물건정보가 있고 물건정보는 가치와 무게로만 구성된다고 가정했을 때
물건의 데이터를 (가치, 물건)으로 묶어서 우선순위 큐 자료구조에 넣을 수 있음
이후에 물건을 꺼내게 되면 항상 가치가 높은 물건이 먼저 나오게 된다.

대부분의 프로그래밍 언어에서 우선순위 큐 라이브러리에 데이터의 묶음을 넣으면
첫번째 원소를 기준으로 우선순위를 설정한다.
따라서 데이터가 (가치, 물건)으로 구성된다면 '가치'값이 우선순위 값이 되는것이다.
파이썬도 마찬가지다.

또한 우선순위 큐를 구현할 때는 내부적으로 최소힙(Min Heap) 혹은 최대힙(Max Heap)을 이용한다.

최소힙은 값이 낮은 데이터가 먼저 삭제되며
최대힙은 값이 큰 데이터가 먼저 삭제된다.

파이썬 라이브러리는 기본적으로 최소 힙 구조를 사용하는데 다익스트라 최단 경로 알고리즘에서는
비용이 적은 노드를 우선 방문하므로 최소 힙구조를 기반으로 하는 파이썬의 우선순위 큐 라이브러리를
그대로 이용하면 적합하다.

참고로 최소힙을 최대힙처럼 사용하려면 우선순위에 해당하는 값에 음수(-) 부호를 붙여서 넣고
꺼낼 때 다시 음수 부호를 붙여서 원래의 값으로 돌리는 방식도 사용 가능하다.

간단히 말하면 가장 가까운 노드를 저장하기 위한 목적으로 우선순위 큐를 추가로 이용한다고 보면 된다.

그림설명은 244페이지부터

[입력 예시]
6 11
1
1 2 2
1 3 5
1 4 1
2 3 3
2 4 2
3 2 3
3 6 5
4 3 3
4 5 1
5 3 1
5 6 2

[출력예시]
0
2
3
1
2
4
'''

# 개선된 다익스트라 알고리즘 소스코드

import heapq
import sys
input = sys.stdin.readline
INF = int(1e9) # 무한을 의미하는 값으로 10억을 설정 

# 노드의 갯수, 간선의 갯수를 입력받기
n, m = map(int, input().split())
# 시작 노드 번호를 입력받기
start = int(input())
# 각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트를 만들기
graph = [[] for i in range(n+1)]
# 최단 거리 테이블을 모두 무한으로 초기화
distance = [INF] * (n+1)

# 모든 간선 정보를 입력받기
for _ in range(m):
    a, b, c = map(int, input().split())
    # a번 노드에서 b번 노드로 가는 비용이 c라는 의미
    graph[a].append((b, c))

def dijkstra(start):
    q = []
    # 시작 노드로 가기 위한 최단 경로는 0으로 설정하여, 큐에 삽입
    heapq.heappush(q, (0, start))
    distance[start] = 0
    while q: # 큐가 비어있지 않다면
        # 가장 최단 거리가 짧은 노드에 대한 정보 꺼내기
        dist, now = heapq.heappop(q)
        # 현재 노드가 이미 처리된 적이 있는 노드라면 무시
        if distance[now] < dist:
            continue
        # 현재 노드와 연결된 다른 인접한 노드들을 확인
        for i in graph[now]:
            cost = dist + i[1]
            # 현재 노드를 거쳐서, 다른 노드로 이동하는 거리가 더 짧은 경우
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))

# 다익스트라 알고리즘 수행
dijkstra(start)

# 모든 노드로 가기 위한 최단 거리를 출력
for i in range(1, n+1):
    # 도달할 수 없는 경우, 무한(INFINITY)이라고 출력
    if distance[i] == INF:
        print("INFINITY")
    # 도달할 수 있는 경우 거리를 출력
    else:
        print(distance[i])