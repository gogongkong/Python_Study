'''
집합 자료형
set 키워드를 이용하여 만들 수 있다.
'''
s1 = set([1,2,3])
print(s1) #{1,2,3}

# 문자열도 가능
s2 = set("Hello")
print(s2) #{'e', 'H', 'l', 'o'}

# 비어 있는 집합 자료형 만들기
s = set()

'''
집합 자료형의 특징
Hello의 경우를 보았을 때 순서와 문자가 전부 들어가 있지 않다.
그 이유는 "중복을 허용하지 않고", "순서가 없기"때문이다.
중복을 허용하지 않는 특성으로 set은 자료형의 중복을 제거하기 위한 필터로 사용되기도 한다.

또한 리스트나 튜플은 순서가 있기 때문에 인덱싱을 통해 자료의 값을 얻을 수 있지만
set은 순서가 없어 인덱싱이 불가능 하다.
set 자료형에서 인덱싱을 하려면 list나 tuple로 변환하여 작업해야한다.
'''
s1 = set([1,2,3])
l1 = list(s1)
t1 = tuple(s1)

'''
교집합, 합집합, 차집합 구하기
'''
s1 = set([1, 2, 3, 4, 5, 6])
s2 = set([4, 5, 6, 7, 8, 9])

# 교집합
print(s1 & s2) # case 1 : {4, 5, 6}
s1.intersection(s2) # case 2 : {4, 5, 6}

# 합집합
print(s1 | s2) # case 1 : {1, 2, 3, 4, 5, 6, 7, 8, 9}
s1. union(s2) # case 2 : {1, 2, 3, 4, 5, 6, 7, 8, 9}

# 차집합
print(s1 - s2) # case 1 : {1, 2, 3}
s1.difference(s2) # case 2 : {1, 2, 3}


'''
집합 자료형 관련 함수들
'''

# add : 이미 만들어진 set 자료형에 값을 "1개만" 추가할 수 있다.
s1 = set([1,2,3])
s1.add(4)
print(s1) # {1, 2, 3, 4}

# update : 여러개의 값을 add하는 방법
s1.update([5,6])
print(s1) # {1, 2, 3, 4, 5, 6}

# remove : 특정 값을 제거
s1.remove(2)
print(s1) # {1, 3, 4, 5, 6}

